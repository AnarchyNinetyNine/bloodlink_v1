// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DONOR
  HOSPITAL
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BloodType {
  O_POS // O+
  O_NEG // O-
  A_POS // A+
  A_NEG // A-
  B_POS // B+
  B_NEG // B-
  AB_POS // AB+
  AB_NEG // AB-
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  role        UserRole? // Role of the user
  fullName    String
  phoneNumber String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Donor    Donor? // Relation to the donor
  Hospital Hospital? // Relation to the hospital
  Admin    Admin? // Relation to the admin

  @@map("users")
}

model Donor {
  id     String @id @default(uuid())
  userId String @unique

  firstName String
  lastName  String
  gender    Gender?
  bloodType BloodType? // Blood type of the donor
  address   String?

  location         Json?
  lastDonationDate DateTime? // Date of the last donation
  availability     Boolean? // Availability status of the donor

  donations                 BloodDonation[] // Relation to BloodDonation
  bloodRequestConfirmations BloodRequestConfirmation[] // Relation to BloodRequestConfirmation
  user                      User                       @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the user

  @@map("donors")
}

model Hospital {
  id     String @id @default(uuid()) // Unique identifier
  userId String @unique // User ID

  name        String
  location    Json?
  cmd         String // Chief Medical Director's name
  contactInfo Json? // Contact information for the hospital

  bloodRequests BloodRequest[] // Relation to BloodRequest
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the user

  @@map("hospitals")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique

  firstName String // First name of the admin
  lastName  String // Last name of the admin

  User User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the user

  @@map("admins")
}

model BloodDonation {
  id String @id @default(uuid())

  donorId         String
  requestId       String // (BloodRequest ID) Links to the request it fulfills
  donatedQuantity Int // Quantity of blood donated
  createdAt       DateTime @default(now()) // Timestamp for when the record was created
  updatedAt       DateTime @default(now()) @updatedAt // Automatically updated timestamp

  donor   Donor        @relation(fields: [donorId], references: [id], onDelete: Cascade) // Relation to the donor
  request BloodRequest @relation(fields: [requestId], references: [id], onDelete: Cascade) // Relation to the request

  @@map("blood_donations")
}

model BloodRequest {
  id String @id @default(uuid())

  requesterId String
  bloodType   BloodType // Blood type requested
  quantity    Int // Quantity of blood requested
  urgency     Boolean // Urgency level of the request
  status      String // Status of the request
  timeFrame   DateTime // Time frame for the request

  donations     BloodDonation[] // List of donations fulfilling this request
  confirmations BloodRequestConfirmation[] // List of confirmations for this request
  createdAt     DateTime                   @default(now()) // Timestamp for when the record was created
  updatedAt     DateTime                   @default(now()) @updatedAt // Automatically updated timestamp

  requester Hospital? @relation(fields: [requesterId], references: [id], onDelete: Cascade) // Relation to the hospital

  @@map("blood_requests")
}

model BloodRequestConfirmation {
  id String @id @default(uuid())

  donorId        String // (Donor ID) Links to the donor confirming the request
  bloodRequestId String // (BloodRequest ID) Links to the request being confirmed

  confirmedAt DateTime @default(now()) // Timestamp for when the confirmation was made

  donor        Donor        @relation(fields: [donorId], references: [id], onDelete: Cascade) // Relation to the donor
  bloodRequest BloodRequest @relation(fields: [bloodRequestId], references: [id], onDelete: Cascade) // Relation to the request

  @@unique([donorId, bloodRequestId])
  @@map("blood_request_confirmations")
}
